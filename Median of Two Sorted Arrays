class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length; int m = nums2.length;
        if((n+m)%2==0){
            return (findkthItemInSortedArrays(nums1, 0, nums2, 0, (n+m)/2)
                    +findkthItemInSortedArrays(nums1, 0, nums2, 0, (n+m)/2+1))/2.0;
        }else{
            return findkthItemInSortedArrays(nums1, 0, nums2, 0, (n+m+1)/2);
        }
    }
    
    private double findkthItemInSortedArrays(int[] A, int A_start, int[] B, int B_start, int k){
        int n=A.length-A_start;
        int m=B.length-B_start;
        if(k==0||(n+m)<k){ return -1; }
        if(n<=0){ return B[B_start+k-1]; }
        if(m<=0){ return A[A_start+k-1]; }
        if(k==1){ return Math.min(A[A_start], B[B_start]); }
        int A_value = (k/2<=n)? A[A_start+k/2-1]: Integer.MAX_VALUE;
        int B_value = (k/2<=m)? B[B_start+k/2-1]: Integer.MAX_VALUE;
        if( A_value>=B_value ){
            return findkthItemInSortedArrays(A, A_start, B, B_start+k/2, k-k/2);
        }else{
            return findkthItemInSortedArrays(A, A_start+k/2, B, B_start, k-k/2);
        }
    }
}
